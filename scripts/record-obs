#!/bin/sh
# A script to record the screen using obs.
set -eu

info () {
    cat <<EOF
$0: record the screen using obs.
Most configuration should be done inside obs.
Supported options:
    -d|--dir: Output directory for the logfile and the recording.
    -n|--name: Prepend this title before the timestamp.
    -p|--profile: Which OBS profile to start with.
    -q|--quiet: Don't play any defined sounds.
    -w|--wrapper: Prepend a shell-quoted string to the final command.
        A good use of this is schedtool to isolate cores or set niceness.
EOF
}

# Set all variables to default values.
cmd=""
directory="${HOME:?}/Videos/Recordings"
quiet=""
start_sound=""
stop_sound=""
error_sound=""
wrapper=""
continue_if_dead=""
obs_profile=""
intent="auto"


# Convenience functions.
puts () { printf %s\\n "$*"; }
err () { puts "$*" >&2; }
die () { err "$*"; exit 1; }
# shellcheck disable=SC1090
src_opt () { if [ -f "$1" ]; then . "$1"; fi; }
is () {
    case "$(puts "${1:-}" | tr '[:upper:]' '[:lower:]')" in
        yes|on|true) true ;;
        no|off|false) false ;;
        *) [ "${1:-}" -gt 0 ] 2> /dev/null ;;
    esac
}
int () { [ "$1" -eq 0 -o "$1" -ne 0 ] 2> /dev/null; }
aorb () { if is "$1"; then puts "$2"; else puts "$3"; fi; }
snd () { if [ -r "${1:-}" ] && ! is "$quiet"; then play -q -V1 "$1"; fi; }


# Config files are just sourced into here; be responsible.
src_opt "/etc/record.rc"
src_opt "${XDG_CONFIG_HOME:-$HOME/.config}/record.rc"

# Parse the command line.
while [ $# -gt 0 ]; do
    case "$1" in
        -q|--quiet) quiet=yes;;
        -d|--dir|--directory) directory="$2"; shift;;
        -n|--name) name="$2"; shift;;
        -p|--profile) obs_profile="$2"; shift;;
        -w|--wrapper) wrapper="$2"; shift;;
        --start) intent="start" ;;
        --stop) intent="stop" ;;
        *) err "Unrecognized option: $1"; info; die;;
    esac; shift
done


# Stop running instance if invoked with one running.
if [ -w "/run/user/$(id -u)" ]; then pidfile="/run/user/$(id -u)/record.pid"
else pidfile="/tmp/record.pid"; fi
if { [ "$intent" = "auto"] && [ -e "$pidfile" ] } || [ "$intent" = "stop"]; then
    puts "Stopping capture."
    pid=$(cat "$pidfile")
    rm "$pidfile" || :
    if [ -e "/proc/$pid" ]; then
        kill "$pid"
        snd "$stop_sound"
        sleep 2
        # The recording gets moved properly after OBS dies.
        output="$(date +%Y%m%d-%H%M%S)"
        if [ "${name:-}" ]; then output="$name $output"; fi
        if [ -e "$directory/00-obs.mkv" ]; then
            mv "$directory/00-obs.mkv" "$directory/$output.mkv"
        fi
        exit 0
    else
        if is "$continue_if_dead"; then
            puts "PID $pid didn't exist; continuing as normal."
        else
            puts "PID $pid didn't exist; stopping."
            exit 0
        fi
    fi
    if [ "$intent" = "stop" ]; then exit 0; fi
fi

if [ "$intent" = "start" ] && [ -e "$pidfile" ]; then
    puts "Already recording; nothing to do."
    exit 0
fi

# Find obs.
if [ ! -x "$cmd" ]; then cmd="$(command -v obs)"; fi
if [ ! -x "$cmd" ]; then
    if [ -x "$(command -v flatpak)" ] && \
     flatpak run --command=true com.obsproject.Studio; then
        cmd="flatpak run com.obsproject.Studio"
    else die Please put a working obs binary in your PATH.; fi
else
    # We have to quote it properly in case it exists somewhere with spaces.
    # This string will get passed to eval.
    cmd="\"$cmd\""
fi

cmd="$cmd --startrecording --minimize-to-tray"

if [ "$obs_profile" ]; then
    cmd="$cmd --profile '$obs_profile'"
fi

# Set up other wrappers if requested, like schedtool.
if [ "$wrapper" ]; then cmd="$wrapper $cmd"; fi

# Notify of record start.
snd "$start_sound"
puts "Starting capture."

if [ -e "$directory/00-record.log" ]; then
    mv "$directory/00-record.log" "$directory/00-record-prev.log"
fi
# This lets us redirect more easily.
{
    puts "Executing command: $cmd"
    eval "$cmd &"
    puts "$!" > "$pidfile"
} > "$directory/00-record.log" 2>&1

# Ensure obs actually started successfully.
sleep 2
if [ -e "$pidfile" ] && ! [ -e "/proc/$(cat "$pidfile")" ]; then
    err "obs appears to have died for some reason. Check logs."
    snd "$error_sound"
    rm "$pidfile" || :
fi
