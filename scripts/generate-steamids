#!/usr/bin/env -S sh -eu
# Generate .steamid files for installed steam games so scraping tools can
# download metadata for them.

puts () { printf %s\\n "$*"; }
acf_value () { sed -nE 's:^\s+"'"$1"'"\s+"(.+)"$:\1:p' "$2"; }
safe_filename () {
	puts "${1#"${1%%[![:space:]]*}"}" | \
	 sed -E -e 's/: / - /' -e "s/[^A-Za-z0-9._()'!& -]//g";
}

[ -d "$1" ]; [ -w "$1" ]
target="$1"
tmp=$(mktemp -d); touch "$tmp/libs"; trap 'rm -r "$tmp"' EXIT
arcadia_cfg="${XDG_CONFIG_HOME:-$HOME/.config}/arcadia.ini"

# These aren't games so don't include them.
cat > "$tmp/excludes" <<'EOF'
^appid_
^Steamworks .+$
^Proton [0-9\.]+$
^Proton Experimental$
Runtime
EOF

# Load extra excludes from arcadia.ini.
if [ -r "$arcadia_cfg" ]; then
	read-ini "$arcadia_cfg" "Generate Excludes" >> "$tmp/excludes"
fi

# First, we have to enumerate every location where Steam might be installed.
# "Installed" in this case specifically means having the steamapps directory.
cat > "$tmp/installs" <<EOF
$HOME/.steam
$HOME/.var/app/com.valvesoftware.Steam/.local/share/Steam
${XDG_DATA_HOME:-$HOME/.local/share}/Steam
EOF

# Then we're going to find libraryfolders.vdf in all of these locations.
while read -r dir; do if [ -d "$dir" ]; then
	# Now, let's find our library folders. Only output unique ones.
	find "$dir/" -name libraryfolders.vdf | while read -r vdf; do
		lib=$(sed -nE 's:^\s+"path"\s+"(.+)"$:\1/steamapps:p' "$vdf")
		if ! grep -q "$lib" "$tmp/libs"; then puts "$lib" >> "$tmp/libs"; fi
	done
fi; done < "$tmp/installs"

# Loop through each library folder and parse .acf files.
while read -r library; do
	if ! cd "$library"; then continue; fi
	for acf in appmanifest_*.acf; do
		if [ "$acf" = 'appmanifest_*.acf' ]; then continue; fi
		appid=$(acf_value appid "$acf")
		name=$(acf_value name "$acf")
		while read -r pattern; do
			if puts "$name" | grep -qE "$pattern"; then
				#puts "$name is excluded; moving on."
				continue 2
			fi
		done < "$tmp/excludes"
		if grep -q "appid=$appid" "$target/"*.steamid 2> /dev/null; then
			#puts ".steamid for $appid already exists; moving on."
			continue
		fi
		safe=$(safe_filename "$name")
		puts "Creating $safe.steamid for $appid."
		cat > "$target/$safe.steamid" <<-EOF
		appid=$appid
		name=$name
		EOF
	done
done < "$tmp/libs"
