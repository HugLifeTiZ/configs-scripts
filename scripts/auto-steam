#!/bin/sh
# A Steam wrapper that waits for the launched game to finish before returning.
# Useful if you want to exceute actions before and after running games.
# If Steam is not already running, then it will close Steam afterwards.
# Do not name this as "steam". It will chase itself around in circles.
set -eu

wait_app=0; steam_running=0

check_pids () {
	# shellcheck disable=SC2048
	for check in $*; do
		if [ -e "/proc/$check" ]; then return 0; fi
	done
	return 1
}
pgrep_xself () { pgrep "${1:?}" | grep -v "$$" || : ; }

if [ "$#" -eq 0 ]; then
	printf "It doesn't make sense to run this without arguments.\n"
	exit 1
fi

for opt in "$@"; do case "$opt" in
	-applaunch) wait_app=1 ;;
	steam://run*) wait_app=1 ;;
	*) : ;;
esac; done

# Make sure no other auto-steams are running.
while [ "$(pgrep -c auto-steam)" -gt 1 ]; do sleep 0.5; done

if [ "$(pgrep_xself '^steam$')" ]; then steam_running=1; fi

if ! [ -x "$(command -v steam)" ]; then
	if [ -x "$(command -v flatpak)" ] && \
	 flatpak --command=true run com.valvesoftware.Steam; then
		steam () { flatpak run com.valvesoftware.Steam "$@"; }
	else
		printf "Can't find Steam.\n"
		exit 1
	fi
fi

if [ "$wait_app" -eq 1 ]; then
	{
		until [ "${mon_pids:-}" ]; do
			mon_pids=$(pgrep SteamChildMonit || :)
			sleep 1
		done
		steam_pids=$(pgrep_xself '^steam$')
		while check_pids "$mon_pids"; do sleep 0.5; done
		if ! [ "$steam_running" -eq 1 ]; then
			sleep 2
			if check_pids "$steam_pids"; then steam -shutdown; fi
			count=0
			# Wait for Steam to actually quit.
			while check_pids "$steam_pids" && [ "$count" -lt 10 ]; do
				sleep 1; count=$((count + 1))
			done
		fi
	} &
	waiter_pid="$!"
	steam "$@" || : &
	wait "$waiter_pid"
else
	steam "$@"
fi
