#!/bin/sh
# auto-steam -- A Steam wrapper that blocks until the launched game exits.
#
# Useful if you want to execute actions before and/or after running games. If
# Steam is not already running, then it will close Steam afterwards. Do not name
# this script as "steam"; It will chase itself around in circles. Don't use this
# to launch Steam for general purpose; it's only useful for launching apps.
set -eu

wait_app=0; steam_running=0

# Print the comment header of this file when asked for help.
usage () { sed -nE '/^#/!q; /SC[0-9]{4}/d; s/^#( |$)//p' "$0"; exit "${1:-0}"; }
case "${1:-}" in -h|--help|--usage|help|usage|"") usage 0 ;; esac

pids () { pgrep "$@" || :; }
qpgrep () { pgrep "$@" >/dev/null 2>&1; }
has_flatpak () {
	[ -x "$(command -v flatpak)" ] && \
	 flatpak run --command=true "$1" >/dev/null 2>&1
}

wait_for_game () {
	while ! [ "${mon_pids:-}" ] && steam_didnt_die; do
		mon_pids=$(pids -f 'reaper SteamLaunch AppId=[0-9]+ --')
		sleep 1
	done
}

game_is_running () {
	if ! [ "${timer:-}" ]; then timer=0; fi
	if check_pids "$mon_pids"; then return 0
	else
		# Check for a different reaper to appear. Prevents race conditions.
		mon_pids=$(pids -f 'reaper SteamLaunch AppId=[0-9]+ --')
		if [ "$mon_pids" ]; then return 0; else
			timer=$((timer + 1));
			if [ "$timer" -ge 3 ]; then
				return 1
			fi
		fi
	fi
}

check_pids () {
	# shellcheck disable=SC2048
	for check in $*; do
		if [ -e "/proc/$check" ]; then return 0; fi
	done
	return 1
}

steam_didnt_die () {
	steam_count=$(pgrep -c '^steam$')
	if [ "${last_steam_count:-0}" -gt 0 ] && [ "$steam_count" -eq 0 ]; then
		# If the count wasn't zero before, but is now, we know that Steam
		# has left the building.
		return 1
	fi
	last_steam_count=${steam_count}
}

for opt in "$@"; do case "$opt" in
	-applaunch|steam://run*) wait_app=1 ;;
	-no*flatpak) AUTO_STEAM_NO_FLATPAK=1; shift ;;
	*) : ;;
esac; done

# Make sure no other auto-steams are running.
while [ "$(pgrep -c auto-steam)" -gt 1 ]; do sleep 0.5; done

if qpgrep '^steam$'; then steam_running=1; fi

# Prefer Flatpak Steam if present and not disabled.
if ! [ "${AUTO_STEAM_NO_FLATPAK:-}" ] && \
 has_flatpak com.valvesoftware.Steam; then
	steam () { flatpak run com.valvesoftware.Steam "$@"; }
elif ! [ -x "$(command -v steam)" ]; then
	printf "Can't find distro Steam.\n" >&2
	exit 1
fi

exec > "${XDG_DATA_HOME:-$HOME/.local/share}/auto-steam.log" 2>&1

if [ "$wait_app" -eq 1 ]; then
	{
		wait_for_game
		steam_pids=$(pids '^steam$')
		# If Steam died before the game actually started, do nothing. If a game
		# fails to start, at least this way you can just close Steam from the
		# tray and you don't have to also do `pkill auto-steam`.
		if [ "$steam_pids" ]; then
			while game_is_running; do sleep 1; done
			if [ "$steam_running" -ne 1 ]; then
				sleep 2
				if check_pids "$steam_pids"; then steam -shutdown; fi
				count=0
				# Wait for Steam to actually quit.
				while check_pids "$steam_pids" && [ "$count" -lt 10 ]; do
					sleep 1; count=$((count + 1))
				done
			fi
		fi
	} &
	waiter_pid="$!"
	steam "$@" || : &
	wait "$waiter_pid"
else
	steam "$@"
fi
