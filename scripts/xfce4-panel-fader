#!/usr/bin/env python2
#
# Sets panel to specified opacity depending on the visilibity of a maximized
# window on the current workspace. Basically hacks together what wingpanel does.
# You need xfce4-dockbarx-plugin >= 0.4 for this to work properly with it.
# 
# Uses xfconf properties within each panel that you want to control.
# For just alpha changing, alpha-normal and alpha-max.
# For color changing, color-normal and color-max.
# For image changing, image-normal and image-max.
# You can mix and match color and image for different states.
# For multi-monitor, use range-x and range-y to set the pixel range to look for
#   relevant windows in.
#
# by Trent "TiZ" McPheron. MIT/X11 License.

import gtk, wnck, dbus, re
from dbus.mainloop.glib import DBusGMainLoop
rx = re.compile(
 r"^(/panels/panel-.+/)(?:(?:alpha|color)-(?:normal|max)|range-(?:x|y))$")

class PanelFader:
    def __init__ (self):
        self.window = None
        self.state_handler = None
        self.wksp_handler = None
        
        self.bus = dbus.SessionBus()
        self.xfconf = dbus.Interface(self.bus.get_object(
         "org.xfce.Xfconf", "/org/xfce/Xfconf"), "org.xfce.Xfconf")
        self.panels = {panel: self.xfconf_get_panel(panel) for panel in set([
            rx.sub(r"\1", prop) for prop in [
                k for (k, v) in self.xfconf.GetAllProperties(
                 "xfce4-panel", "/panels").iteritems() if rx.match(str(k))
                ]
            ])
        }
        self.bus.add_signal_receiver(self.xfconf_changed, "PropertyChanged",
         "org.xfce.Xfconf", "org.xfce.Xfconf", "/org/xfce/Xfconf")
        
        self.screen = wnck.screen_get_default()
        while gtk.events_pending():
            gtk.main_iteration()
        self.screen.connect("active_window_changed", self.active_win_change)
        self.screen.connect("active_workspace_changed", self.check_status)
        self.screen.connect("window_opened", self.check_status)
        self.screen.connect("window_closed", self.check_status)
        self.active_win_change()
    
    # Xfconf stuff.
    def xfconf_get (self, prop_base, prop, default=None):
        if self.xfconf.PropertyExists("xfce4-panel", prop_base + prop):
            retval = self.xfconf.GetProperty("xfce4-panel", prop_base + prop)
            return retval
        else:
            return default
    
    def xfconf_set (self, panel, prop, value):
        self.xfconf.SetProperty("xfce4-panel", panel["base"] + prop, value)
    
    def xfconf_get_panel (self, prop_base):
        panel = {}
        panel["base"] = prop_base
        
        for state in (("normal", 0), ("max", 100)):
            alpha = "alpha-" + state[0]
            color = "color-" + state[0]
            image = "image-" + state[0]
            
            panel[alpha] = self.xfconf_get(prop_base, alpha, state[1])
            panel[image] = self.xfconf_get(prop_base, image, None)
        
            panel[color] = self.parse_color(self.xfconf_get(prop_base, 
             color, None))
            if panel[color]:
                if len(panel[color]) == 4:
                    panel[alpha] = panel[color][3] * 100 / 65536
                    panel[color][3] = 65536
                else: panel[color].append(65536)
                # This is the way panel colors come out over DBus,
                # so this is the way they have to go back in.
                panel[color] = dbus.Array([dbus.UInt32(i, variant_level=1)
                 for i in panel[color]], signature=dbus.Signature('v'),
                 variant_level=1)
        
        for r in ("x", "y"):
            panel["range-" + r] = [int(i) for i in
             self.xfconf_get(prop_base, "range-" + r, [0, 9999])]
            if len(panel["range-" + r]) != 2: panel["range-" + r] = [0, 9999]
        
        return panel
    
    def xfconf_changed (self, channel, prop, val):
        if channel != "xfce4-panel" or not rx.match(prop): return
        panel = rx.sub(r"\1", prop)
        self.panels[panel] = self.xfconf_get_panel(panel)
        self.check_status()
    
    # Allows colors to be stored as strings.
    def parse_color (self, color):
        if isinstance(color, (list, tuple, dbus.Array)):
            return list(color)
        elif isinstance(color, (str, dbus.String)):
            color = str(color)
            if color[0] == '#':
                color = color[1:]
            if len(color) in (3, 4): digits = 1
            elif len(color) in (6, 8): digits = 2
            elif len(color) in (12, 16): digits = 4
            else: return None
            return [
                int(color[i:i+digits] * (4 / digits) , 16)
                for i in range(0, len(color), digits)
            ]
        else:
            return None
    
    # Wnck stuff.
    def active_win_change (self, null1=None, null2=None):
        if self.window and self.state_handler and self.wksp_handler:
            self.window.disconnect(self.state_handler)
            self.window.disconnect(self.wksp_handler)
        self.window = self.screen.get_active_window()
        if self.window:
            self.state_handler = self.window.connect("state_changed",
             self.check_status)
            self.wksp_handler = self.window.connect("workspace_changed",
             self.check_status)
        self.check_status()
    
    def check_status (self, null1=None, null2=None, null3=None):
        for k, v in self.panels.iteritems():
            if len(self.get_wins(v)) > 0: self.set_panel_state(v, "max")
            else: self.set_panel_state(v, "normal")
    
    def get_wins (self, panel):
        return [w for w in self.screen.get_windows_stacked() if
         w.is_visible_on_workspace(self.screen.get_active_workspace()) and
         w.is_maximized() and not w.is_skip_tasklist() and
         w.get_window_type() == 0 and self.window_in_range(w, panel)]
    
    def window_in_range (self, window, panel):
        geometry = window.get_geometry()
        return panel["range-x"][0] <= geometry[0] <= panel["range-x"][1] and \
         panel["range-y"][0] <= geometry[0] <= panel["range-y"][1]
    
    # Where the actual magic is done.
    def set_panel_state (self, panel, state):
        self.xfconf_set(panel, "background-alpha", panel["alpha-" + state])
        if panel["image-" + state]:
            self.xfconf_set(panel, "background-style", 2)
            self.xfconf_set(panel, "background-image", panel["image-" + state])
        elif panel["color-" + state]:
            self.xfconf_set(panel, "background-style", 1)
            self.xfconf_set(panel, "background-color", panel["color-" + state])


if __name__ == '__main__':
    DBusGMainLoop(set_as_default=True)
    fader = PanelFader()
    gtk.main()
