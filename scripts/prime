#!/usr/bin/env -S sh -eu
# prime -- Manage and query NVidia Prime state and offloads.
# The state where the NVidia GPU is entirely powered down is not supported
# and the on-demand/offload state will be used instead.
#
# <<! This script will sudo itself in select mode to adjust xorg config. !>>
# <<! This script will sudo itself in setup mode to create xorg configs. !>>
# 
# prime select <nvidia|intel|on-demand|power>
#     If /etc/X11/xorg.conf.d/20-nvidia-prime.conf exists, rewrite it to
#     configure the desired PrimaryGPU state. Otherwise, if configlets for the
#     iGPU and dGPU exist, rearrange them for the desired state.
#     This is the main thing that is really needed to toggle between nvidia
#     and on-demand, but xrandr provider offload is still necessary when the
#     dGPU is the primary GPU, in order for anything to appear on iGPU outputs.
#         The special values power and auto set the PrimaryGPU value based on
#         whether the computer is plugged into AC.
# prime offload, prime xrandr
#     Set up the xrandr output sinks for the NVidia primary GPU state.
# prime query
#     Get current state based on xrandr provider availability, or fall back to
#     parsing the xorg.conf.d file that this script sets up.
# prime run
#     Run an application on the NVidia GPU if it is available.

# Print the comment header of this file when asked for help.
usage () { sed -nE '/^#/!q; /SC[0-9]{4}/d; s/^#( |$)//p' "$0"; exit "${1:-0}"; }
case "${1:-}" in -h|--help|--usage|help|usage|"") usage 0 ;; esac

xorg_conf_d="/etc/X11/xorg.conf.d"
nvidia_primary_gpu_conf="$xorg_conf_d/20-nvidia-prime.conf"
dgpu_conf="$xorg_conf_d/15-dgpu.conf"
igpu_primary_conf="$xorg_conf_d/05-igpu.conf"
igpu_secondary_conf="$xorg_conf_d/25-igpu.conf"

case "${1:-}" in
setup)
	if [ "$(id -u)" -gt 0 ]; then exec sudo -k "$0" "$@"; fi
	mkdir -p /etc/X11/xorg.conf.d
	busid=$(lspci | grep 'VGA.*NVIDIA' | grep -Po '\d+:\d+.\d+' | tr . :)
	if ! [ -e "$dgpu_conf" ]; then
		cat > "$dgpu_conf" <<-EOF
		Section "Device"
			Identifier "dGPU"
			Driver "nvidia"
			BusID "PCI:$busid"
		EndSection
		EOF
	fi
	if ! { [ -e "$igpu_primary_conf" ] || [ -e "$igpu_secondary_conf" ]; }; then
		cat > "$igpu_primary_conf" <<-EOF
		Section "Device"
			Identifier "iGPU"
			Driver "modesetting"
			Option "AsyncFlipSecondaries" "on"
		EndSection
		EOF
	fi
	install -m0755 "$0" "$(readlink -f /usr/local/sbin/prime)"
	;;
"select")
	case "${2:-}" in
	nvidia) primarygpu="yes" ;;
	intel|on-demand) primarygpu="no" ;;
	power|auto)
		if acpi -a | grep -qi "on-line"; then
		primarygpu="yes"; else primarygpu="no"; fi
		;;
	*) printf "Valid options: nvidia, intel, on-demand, power\n" >&2; exit 1 ;;
	esac
	if [ "$(id -u)" -gt 0 ]; then exec sudo -k "$0" "$@"; fi
	if [ -e "$nvidia_primary_gpu_conf" ]; then
		cat > "$nvidia_primary_gpu_conf" <<-EOF
		Section "OutputClass"
			Identifier "nvidia"
			MatchDriver "nvidia-drm"
			Driver "nvidia"
			Option "PrimaryGPU" "$primarygpu"
		EndSection
		EOF
	elif [ -e "$igpu_primary_conf" ] && [ "$primarygpu" = "yes" ]; then
		mv "$igpu_primary_conf" "$igpu_secondary_conf"
	elif [ -e "$igpu_secondary_conf" ] && [ "$primarygpu" = "no" ]; then
		mv "$igpu_secondary_conf" "$igpu_primary_conf"
	fi
	;;
query)
	providers=$(xrandr --listproviders || :)
	# It's better to prefer querying the current state than the configured one.
	if [ "$providers" ]; then
		if printf %s\\n "$providers" | grep -q 'NVIDIA-[0-9]'; then
			printf "nvidia\n"
		elif printf %s\\n "$providers" | grep -q 'NVIDIA-G[0-9]'; then
			printf "on-demand\n"
		else
			printf "intel\n"
		fi
	# But if we can't do that, check the config file.
	elif [ -r "$nvidia_primary_gpu_conf" ]; then
		if grep -qi '"PrimaryGPU" "yes"' "$nvidia_primary_gpu_conf"; then
			printf "nvidia\n"
		else printf "on-demand\n"; fi
	elif [ -e "$dgpu_conf" ] && [ -e "$igpu_secondary_conf" ]; then
		printf "nvidia\n"
	elif [ -e "$dgpu_conf" ] && [ -e "$igpu_primary_conf" ]; then
		printf "on-demand\n"
	else
		printf "Unable to determine prime state.\n" >&2; exit 1
	fi
	;;
offload|xrandr)
	# This will only do things if we're in the NVidia primary GPU state.
	providers=$(xrandr --listproviders || :)
	if [ "$providers" ]; then
		if printf %s\\n "$providers" | grep 'NVIDIA-[0-9]'; then
			get_name () { awk '{ print $NF }' | cut -d: -f2; }
			get_id () { cut -d: -f3 | cut -d" " -f2; }
			src=$(printf %s "$providers" | grep -i 'nvidia' | get_id)
			sink=$(printf %s "$providers" | grep -Ei 'intel|modeset' | get_id)
			xrandr --setprovideroutputsource "$sink" "$src"
			xrandr --auto
		fi
	fi
	;;
run)
	case "$("$0" query)" in
	nvidia|on-demand)
		export __NV_PRIME_RENDER_OFFLOAD=1
		export __GLX_VENDOR_LIBRARY_NAME=nvidia
		export __VK_LAYER_NV_optimus=NVIDIA_only
		shift
		exec "$@"
		;;
	intel)
		printf "NVidia GPU is not available.\n" >&2
		exit 1
		;;
	esac
    ;;
esac
