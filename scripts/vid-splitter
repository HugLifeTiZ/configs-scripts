#!/bin/sh
# Splits videos by timestamps. Developed usecase is taking a long gaming
# session and splitting it into individual matches. Input file is formatted:
# <name of compilation>
# <index of audio track or "all">
# <start> <end> <name of segment>
# <start> <end> <name of segment>
# <etc...>
set -eu

if ! [ -x "$(command -v ffmpeg)" ]; then printf "No ffmpeg\n"; exit 1; fi

input=${1:?}
base=${input%.*}
if ! [ -r "$input" ]; then
    printf "Video file not readable\n"; exit 1
elif ! [ -r "$base.txt" ]; then
    printf "No split file\n"; exit 1
fi

exec < "$base.txt"

read -r pfx
read -r audio
dir="$(dirname "$input")/$pfx"
mkdir -p "$dir"
if [ "$audio" = "all" ]; then audio="0:a"
else audio="0:a:$audio"; fi

while read -r line; do
    start=$(printf %s "$line" | cut -d' ' -f1)
    end=$(printf %s "$line" | cut -d' ' -f2)
    name=$(printf %s "$line" | cut -d' ' -f3-)
    filename=$(printf "%s" "$name" | sed 's/[\\/:\*\?"<>\|\x01-\x1F\x7F]//g')
    {
        ffmpeg -ss "$start" -i "$input" -vframes 1 -s 1280x720 \
         -y "$dir/$filename.thumb.png"
        ffmpeg -ss "$start" -to "$end" -i "$input" -map 0:v -map "$audio" \
         -c copy -metadata title="$pfx: $name" -movflags faststart \
         -avoid_negative_ts make_zero \
         -y "$dir/$filename.mp4"
    } < /dev/null
done
